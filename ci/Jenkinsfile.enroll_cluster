env.SSH="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@${params.HOST}"

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '100'))
    }

    parameters {
        string(name:"KUBECONFIG_HUB", defaultValue: "/root/clusterconfigs/master/auth/kubeconfig", description: "Kubeconfig for the existing hub cluster", trim: true)
        string(name:"KUBECONFIG_SPOKE", defaultValue: "/root/clusterconfigs/slave/auth/kubeconfig", description: "Kubeconfig for the existing spoke cluster", trim: true)
        string(name:"GIT_REPO", defaultValue: "git://github.com/redhat-nfvpe/flexran-manifests.git", description: "Repo to clone containing the ACM manifests", trim: true)
        string(name:"GIT_BRANCH", defaultValue: "master", description: "Branch for the git repo", trim: true)
    }

    agent { label 'worker' }

    environment {
            BASE_REPO_DIR = sh(returnStdout: true, script: "echo $WORKSPACE/flexran-manifests").trim()
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                // cleanup workspace
                step([$class: 'WsCleanup'])

                script {
                    // Set the build description to trigger user
                    currentBuild.getBuildCauses().reverse().eachWithIndex { foo, index ->
                        if(currentBuild.getBuildCauses().reverse()[index].userName != null) {
                            currentBuild.description = "Triggered by: " + currentBuild.getBuildCauses().reverse()[index].userName
                            return true
                        }
                    }
                }

                sh '''
		# clone the repo
                git -c http.sslVerify=false clone --single-branch --branch $GIT_BRANCH $GIT_REPO $BASE_REPO_DIR
                '''

            }
        }

        stage('Pre-create cluster in hub') {            
            steps {
                sh '''
		set +e
		export KUBECONFIG=${KUBECONFIG_HUB}
		for i in {1..30}; do
			kubectl apply -k ${BASE_REPO_DIR}/import_cluster/hub/
			if [ $? -eq 0 ]; then
				break
			fi
			sleep 30
		done
		set -e
                '''
            }
        }

        stage('Inject credentials on spoke') {            
            steps {
                sh '''
		set +e
		export KUBECONFIG_HUB_CONTENT=$(cat $KUBECONFIG_HUB | base64 -w 0)
		sed -i "s/\\$KUBECONFIG/${KUBECONFIG_HUB_CONTENT}/" ${BASE_REPO_DIR}/import_cluster/spoke/v204_bootstrap_secret.yaml
		set -e
                '''
            }
        }

        stage('Import spoke') {            
            steps {
                sh '''
		set +e
		export KUBECONFIG=${KUBECONFIG_SPOKE}
		for i in {1..30}; do
			kubectl apply -k ${BASE_REPO_DIR}/import_cluster/spoke/
			if [ $? -eq 0 ]; then
				break
			fi
			sleep 30
		done
		set -e
                '''
            }
        }


    }
}  // pipeline
